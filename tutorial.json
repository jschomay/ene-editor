{"id":"d5rDIrrBbueHg9d2aiSA","settings":{"collaborators":[],"owner":"2BIP1ykReRR8gKhsbx0C2lpvZsp1","public":false,"description":"An interactive example project to learn how to write your own stories","name":"Tutorial project"},"manifest":[{"description":"_Here you can learn about more advanced techniques. {$.locked?  But right now it is locked.  You'll need to learn more basics before you can enter.}_\n___\nThis classroom has two additional _tags_ than `CLASSROOM_101`, which get used in other rules.","createdAt":1613161604481,"name":"Classroom 202","entity":"CLASSROOM_202.location.locked.advanced"},{"name":"Basics teacher","entity":"BASICS_TEACHER.character.current_location=CLASSROOM_101","createdAt":1613167545157,"description":"This entity has special rules applied to it that will override this text.  You should never see this..."},{"createdAt":1613322458001,"name":"Advanced teacher","entity":"ADVANCED_TEACHER.character.current_location=CLASSROOM_202","description":"{\n_Congratulations and welcome to 202.  I've got a few advanced tips and tricks to share with you.  To start with, I hope you've already noticed some of the \"dynamic text\" features, such as cycling narrative, conditional narrative, and value insertions.  These kinds of text are always put between curly braces.  In fact, I'm using one long cycling text syntax to make me say different things each time you interact with me.  It's easier than writing a bunch of rules like the basics teacher did, although sometimes you might need to use a rule.  The full documentation shows all of the dynamic text options you can use._\n|\n_Have you noticed the bar at the top of the preview?  That is useful for debugging.  It tells you which entity was last interacted with, and which rule, if any, it triggered.  If no rule matched, then it shows the entity id again.  The preview theme uses the Description field text when no rule matches, which is why you are seeing this now._\n\n_Also, you can search the current world model state, which can be very useful.  For example, if you search for_ `PLAYER` _you'll see all of the data associated with that entity.  It is shown in the same syntax you use when adding entities, which makes it easy to search for entities with specific properties, like_ `.character` _to see all the characters, or_ `.current_location=CLASSROOM_202` _to see everything in this classroom. _\n|\n_Are you curious how the `intro` rule worked?  Your theme can send programmatic triggers to the engine for special events.  This preview theme only sends one of these at the very beginning called `start`.  Because `start` isn't an entity id, you have to wrap it in quotes in your rule trigger to indicate that it is a special programmatic trigger.  That is exactly what the `intro` rule does.  If you are writing your own custom theme, you can make more use of this feature._\n|\n_Speaking of custom themes, you can have a lot more flexibility if you write your own theme.  In fact, you can embed the Elm Narrative Engine in a full game for ultimate customization.  This is pretty advanced and more information will be posted later about how to do this.  For now, just understand that it works in three parts.  The first part is the \"narrative data\" - the world model and rules that you write in this editor.  Second is the engine itself, which uses the world model and rules to respond to interactions.  Lastly, you can query the engine for information about the world model.  The preview theme uses a query like_ `*.character.current_location=(link PLAYER.current_location)` _to get all of the characters in the current location, then renders them as a list._\n\n_Oh, by the way, if that query looks strange, it is a special kind of query that we haven't used yet called a \"compare\" query.  You can learn more about it in the full documentation._\n|\n_That's a lot of information!  I think it's time you go off and make your own project.  Have fun, and don't be afraid to ask for help.  Thanks for stopping by!_\n}"},{"name":"Classroom 101","description":"_{You can learn the basics of how the Elm Narrative Engine works in here.|Class is in session.}_","createdAt":1613154774570,"entity":"CLASSROOM_101.location"},{"entity":"SAM.character.current_location=CLASSROOM_101","createdAt":1613167603676,"description":"_Hi, my name is Sam!  {*.friend_of=SAM?  Thanks for giving me a friend! | Kind of lonely in here...}_\n___\nThis entity has a _tag_ of `character` and a _link_ of `current_location=CLASSROOM_101`, which this theme will use to render under the \"Nearby characters\" section when the `PLAYER` entity has the _link_ `current_location=CLASSROOM_101`.","name":"Other basics student"},{"entity":"APPLE.item.current_location=CLASSROOM_101","name":"Shiny red apple","createdAt":1612749088120,"description":"_A nice juicy apple._"},{"entity":"NOTEBOOK.item.current_location=PLAYER","createdAt":1613161764146,"name":"Notebook","description":"_Hope you are taking notes!_\n___\nThis theme considers the \"inventory\" to be any entity with a _tag_ of `item` and a _link_ of `current_location=PLAYER`.  In this case, the {$.name} is in your inventory."},{"description":"`PLAYER` is a special entity used in the preview theme to track the current location and inventory.  It isn't ever directly rendered, but you can use it in your rules.  It also has a starting `level=0` _stat_, which is arbitrary, but used in some of the rules.","name":"<player>","createdAt":1613161016782,"entity":"PLAYER.current_location=CLASSROOM_101.level=0"},{"entity":"DESK.item.fixed.current_location=CLASSROOM_101","name":"Desk","createdAt":1613171465720,"description":"_Have a seat._\n___\nYou can't pick up this desk because the `fixed` _tag_ prevents the `taking_things` rule from triggering."}],"rules":[{"narrative":"_Take careful notes, the lessons in this classroom are advanced!_\n___\n`pay_close_attention` is a special rule that uses a syntax for triggering when the player is in \"any location that is advanced\".  We could have specified `CLASSROOM_202`, but by doing it this way, we can have multiple advanced locations, and all we have to do is _tag_ them with `advanced` to get this rule to trigger.","rule_id":"pay_close_attention","createdAt":1613176172789,"rule":"ON: NOTEBOOK\nIF: PLAYER.current_location=(*.advanced)"},{"createdAt":1613172845992,"narrative":"{_Sam is still lonely.  Do you want a hint?_ | _You need to make a new entity that looks close to this:_ `PAT.character.friend_of=SAM.current_location=CLASSROOM_101`. }\n___\nThis text is from rule `assignment_hint`.  Note how similar the \"Rule\" is to `assignment_complete`.  See the notes there for more insight.  \n\nAlso notice how this rule doesn't have a `DO:` clause, so it doesn't change the world model.  It is possible to trigger this rule multiple times. Since it doesn't change the world model, you don't have to worry about any unexpected side effects.  Also, the Narrative uses a \"cycling text\" syntax to show something different the first time this rule is triggered.  Sometimes this is simpler than adding a new _tag_ to an entity and a new rule to reference it.","rule":"ON: BASICS_TEACHER\nIF: PLAYER.level=3","rule_id":"assignment_hint"},{"narrative":"**Welcome to the interactive tutorial!**\n\nThis will teach you to write your own interactive stories.\n\nThe default preview theme has the concept of  items, characters, and locations, with a special \"player\" entity to track the current location and inventory.   (If you use your own custom theme you can have any kind of world model that makes sense for your own story.)\n\nGo ahead and click on some of the entities to learn more.\n\n_(By the way, this theme supports markdown)_","rule":"ON: \"start\"","createdAt":1613154370267,"rule_id":"intro"},{"rule_id":"lesson_2","rule":"ON: BASICS_TEACHER\nIF: PLAYER.level=1\nDO: PLAYER.level+1","narrative":"_Hello again {PLAYER.name}.  Just a quick note about this preview theme.  It is \"live\" which means that most changes you make will take effect on your next interaction without having to reload the page, which makes it easier to get quick feedback.  Sometimes you'll want to reload the page anyway, especially if you need to reset the world model state._\n___\nThis is from rule `lesson_2`.","createdAt":1613172013976},{"rule":"ON: BASICS_TEACHER\nIF: PLAYER.level=0\nDO: PLAYER.level+1","narrative":"_Welcome to ENE 101 {PLAYER.name}. Your first lesson is that interacting with the same thing more than once will often have different results based what you've already done.  For example, if you interact with me again, you'll get something different._\n\n_Oh, by the way, if you want me to call you something different than {PLAYER.name}, you can change the 'Name' field for `PLAYER` under the 'Manifest' tab._\n\n___\n\nThis text comes from rule `lesson_1` if you want to see how it was triggered.  Note that it increments the `PLAYER`'s `level` _stat_ to prevent it from triggering more than once.","createdAt":1613169509053,"rule_id":"lesson_1"},{"createdAt":1613175537115,"rule_id":"moving_around","narrative":"_Let's check out {$.name}._\n___\nThis rule is similar to `taking_things`.  `!` means \"not\" what ever comes after it.  The ` $ ` gets interpreted as the entity that triggered this rule.  Note how you can use ` $ ` in the narrative too.","rule":"ON: *.location.!locked\nIF: PLAYER.!current_location=$\nDO: PLAYER.current_location=$"},{"narrative":"_Good job {PLAYER.name}!  You've learned the basics.  When you are ready, go to the advanced classroom.  Remember to check the Cheat Sheet or the full Documentation if you get stuck._\n___\nThis text is from rule `assignment_complete`.  This rule has a few notable things going on with it.  First of all, the `ON:` and `IF:` clauses are quite similar to the `assignment_hint` rule.  This difference is that this one requires a friend for `SAM` to exist in the world model in order for it to trigger.  However, notice that `assignment_hint` still meets all the conditions to trigger, so why does this rule take precedence?  It is because this rule is more \"specific.\"  A number of factors go into calculating how specific a rule is, but basically the more conditions in the `ON:` and `IF:` clauses, the more specific it will be.  If this rule left out the `PLAYER.level=3` clause, it would be just as specific as the `assignment_hint` and the engine wouldn't know which one to pick.\n\nThe other important note is that just like `assignment_hint`, it is possible to trigger this rule multiple times.  Each time it will unlock classroom 202.  In this case, that doesn't matter, but watch out for side effects like this.  If you wanted to prevent this, you could also increment the `PLAYER`'s `level` _stat_, though that would change what happens when subsequently interacting with basics teacher.\n","rule_id":"assignment_complete","rule":"ON: BASICS_TEACHER\nIF: PLAYER.level=3\n     *.friend_of=SAM\nDO: CLASSROOM_202.-locked","createdAt":1613173452349},{"narrative":"_I'll just take that._\n___\nThe `taking_things` rule triggers for any entity with a _tag_ of `item` that does not already have a _link_ of `current_location=PLAYER` and does not have a _tag_ of `fixed`.  It sets `current_location=PLAYER` and shows this narrative. The ` $ ` gets interpreted as the entity that triggered this rule.","rule_id":"taking_things","rule":"ON: *.item.!fixed.!current_location=PLAYER\nDO: $.current_location=PLAYER","createdAt":1613162249511},{"createdAt":1613172393824,"rule":"ON: BASICS_TEACHER\nIF: PLAYER.level=2\nDO: PLAYER.level+1","rule_id":"lesson_3","narrative":"_Time for your first assignment.  Have you talked to Sam yet?  Sounds like she is lonely.  Why don't you add another student to my class.  You'll need to add a new entity in the \"Manifest\" tab.  It should look similar to the one for `SAM`._\n\n_For extra credit, try to make this new student Sam's friend.  You can look at `SAM`'s Narrative for a clue on how to do that, and it might help to reference the  \"Cheat Sheet tab._\n___\nThis is from rule `lesson_3`."}]}
